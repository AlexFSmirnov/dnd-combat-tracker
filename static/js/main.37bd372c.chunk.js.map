{"version":3,"sources":["helpers/dnd-beyond/getCharacterStats.ts","helpers/getRequestErrorMessage.tsx","redux/actions/ui/actionCreators.ts","redux/actions/ui/types.ts","redux/actions/characters/actionCreators.ts","redux/actions/characters/types.ts","redux/reducers/characters.ts","redux/actions/npcs/actionCreators.tsx","redux/actions/npcs/types.ts","redux/reducers/npcs.ts","redux/reducers/ui.ts","redux/reducers/encounter.ts","redux/reducers/index.ts","redux/actions/encounter/types.ts","redux/index.ts","components/LoadingView/style.ts","components/LoadingView/LoadingView.tsx","components/Navbar/style.ts","components/Navbar/Navbar.tsx","components/Tooltip/Tooltip.tsx","components/RootComponent/style.ts","components/DividedList/style.tsx","components/DividedList/DividedList.tsx","components/SavedCharacterListItem/style.ts","components/SavedCharacterListItem/SavedCharacterListItem.tsx","components/SavedCharactersList/SavedCharactersList.tsx","components/SavedNPCListItem/style.ts","components/SavedNPCListItem/SavedNPCListItem.tsx","components/SavedNPCsList/SavedNPCsList.tsx","components/NewEncCharacterListItem/style.ts","components/NewEncCharacterListItem/NewEncCharacterListItem.tsx","redux/actions/encounter/actionCreators.ts","components/NewEncCharactersList/NewEncCharactersList.tsx","components/NewEncNPCListItem/style.ts","components/NewEncNPCListItem/NewEncNPCListItem.tsx","components/NewEncNPCsList/NewEncNPCsList.tsx","components/RootComponent/RootComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCharacterStats","a","characterId","jsonUrl","axios","method","url","withCredentials","response","data","getRequestErrorMessage","error","status","Fragment","message","Link","href","openErrorDialog","type","payload","addCharacterByUrl","maxHitPoints","dispatch","getState","split","length","characters","every","c","id","toString","then","stats","name","removedHitPoints","temporaryHitPoints","deathSaves","avatarUrl","themeColor","defaultBackdrop","addCharacter","updateCharacterById","parseInt","find","updateCharacter","character","initialState","state","action","prevCharacter","index","indexOf","slice","updateMaxHpById","maxHp","deleteById","addNPC","npc","updateNPC","props","deleteNPC","originalNPC","updatedNPC","errorDialog","isOpen","npcs","initiativeById","currentId","characterNumber","Object","keys","filter","key","includes","npcNumber","removeNPC","addedNPCsKeys","startsWith","latestAddedNpc","reduce","accumulator","keyString","number","splitByHash","omit","rootReducer","combineReducers","ui","encounter","persistConfig","storage","stateReconciler","autoMergeLevel2","blacklist","store","createStore","persistReducer","applyMiddleware","thunk","persistor","persistStore","LoadingViewBackground","styled","div","LoadingViewContainer","LoadingViewImage","img","LoadingViewText","LoadingView","src","process","NavbarContainer","Navbar","children","other","AppBar","position","color","style","minHeight","Toolbar","withStyles","theme","tooltip","fontSize","backgroundColor","palette","secondary","main","arrow","Tooltip","RootComponentContainer","backgroundImageSrc","RootComponentWrapper","DividedListContainer","small","DividedListWrapper","DividedListSublistContainer","Divider","DividedList","useTheme","useMediaQuery","breakpoints","down","React","cloneElement","map","child","SavedCharacterListItemContainer","Grow","connect","updateCharacterMaxHp","deleteCharacter","useState","setMaxHp","isDialogOpen","setIsDialogOpen","closeConfirmationDialog","Paper","elevation","width","height","Avatar","variant","Typography","TextField","label","value","onChange","e","target","IconButton","onClick","Delete","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","isNewCharacterDialogOpen","setIsNewCharacterDailogOpen","characterURL","setCharacterURL","characterMaxHitPoints","setCharacterMaxHitPoints","closeNewCharacterDialog","autoFocus","fullWidth","margin","disabled","SavedNPCListItemContainer","updateNPCSafe","n","isEditDialogOpen","setIsEditDialogOpen","isDeleteConfirmationDialogOpen","setIsDeleteConfirmationDialogOpen","NPCName","setNPCName","NPCMaxHitPoints","setNPCMaxHitPoints","NPCAvatarUrl","setNPCAvatarUrl","closeEditDialog","closeDeleteConfirmationDialog","Edit","addNPCSafe","isNewNPCDialogOpen","setIsNewNPCDialogOpen","closeNewNPCDialog","NewEncCharacterListItemContainer","addCharacterToEncounter","removeCharacterFromEncounter","isCharacterSelected","useMemo","some","console","log","Checkbox","checked","flexGrow","NewEncNPCListItemContainer","NewEncNPCCounter","primary","addNPCToEncounter","removeNPCFromEncounter","addedNPCCount","count","encNpc","size","Remove","Add","currentBackgroundUrl","largeBackdropAvatarUrl","isErrorDialogOpen","errorMessage","closeErrorDialog","isCharacterDialogOpen","setIsCharacterDialogOpen","closeCharacterDialog","title","People","fullScreen","Close","marginLeft","SavedNPCsList","maxWidth","createMuiTheme","typography","fontFamily","values","xs","sm","md","lg","xl","App","ThemeProvider","loading","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.37bd372c.chunk.js","sourcesContent":["import axios from 'axios';\nimport { DnDBeyondCharacter } from './types';\n\nexport interface GetCharacterStatsProps {\n    characterId: string;\n}\n\nexport interface CharacterStats {\n    currentHp: number;\n    maxHp: number;\n    tempHp: number;\n    armorClass: number;\n    passivePerception: number;\n}\n\nconst getCharacterStats = async ({ characterId }: GetCharacterStatsProps): Promise<DnDBeyondCharacter> => {\n    const jsonUrl = `https://www.dndbeyond.com/character/${characterId}/json`;\n\n    const response = await axios({ method: 'GET', url: jsonUrl, withCredentials: false });\n    return response.data as DnDBeyondCharacter;\n};\n\nexport default getCharacterStats;\n","import React from 'react';\r\nimport { AxiosError } from 'axios';\r\nimport { Link } from '@material-ui/core';\r\n\r\nexport const getRequestErrorMessage = (error: AxiosError): JSX.Element => {\r\n    if (error.response) {\r\n        switch (error.response.status) {\r\n        case 404:\r\n            return (\r\n                <React.Fragment>\r\n                    Invalid character URL, page not found. Make sure that the ID is correct and that character privacy is set to \"Public\".\r\n                    <br /><br />\r\n                    Error message: {error.message}\r\n                </React.Fragment>\r\n            );\r\n        \r\n        case 403:\r\n            return (\r\n                <React.Fragment>\r\n                    D&D Beyond blocked a request because it thinks I'm a robot. Opening <Link href=\"https://www.dndbeyond.com/\">dndbeyond.com</Link> in Incognito mode and passing the captcha there usually helps.\r\n                    <br /><br />\r\n                    Error message: {error.message}\r\n                </React.Fragment>\r\n            );\r\n\r\n        default:\r\n            return (\r\n                <React.Fragment>\r\n                    Request was unsuccessful. Most likely your browser is blocking Cross-Origin requests (CORS). Make sure you have a CORS-allowing extension installed or disable D&D Beyond integration in settings.\r\n                    <br /><br />\r\n                    Error message: {error.message}\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            Request was unsuccessful. Most likely your browser is blocking Cross-Origin requests (CORS). Make sure you have a CORS-allowing extension installed or disable D&D Beyond integration in settings.\r\n            <br /><br />\r\n            Error message: {error.message}\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import {\r\n    ERROR_DIALOG_OPENED,\r\n    ERROR_DIALOG_CLOSED,\r\n} from './types';\r\n\r\nexport const openErrorDialog = (message: JSX.Element) => ({\r\n    type: ERROR_DIALOG_OPENED,\r\n    payload: message,\r\n});\r\n\r\nexport const closeErrorDialog = () => ({\r\n    type: ERROR_DIALOG_CLOSED,\r\n});\r\n\r\nexport const openCorsDialog = () => ({\r\n    type: ERROR_DIALOG_OPENED,\r\n    payload: 'Cors blah blah',\r\n});\r\n\r\nexport const openCaptchaDialog = () => ({\r\n    type: ERROR_DIALOG_OPENED,\r\n    payload: 'Captcha kekaptcha',\r\n});\r\n","export const CORS_DIALOG_OPENED = 'CORS_DIALOG_OPENED';\r\nexport const CORS_DIALOG_CLOSED = 'CORS_DIALOG_CLOSED';\r\nexport const CAPTCHA_DIALOG_OPENED = 'CAPTCHA_DIALOG_OPENED';\r\nexport const CAPTCHA_DIALOG_CLOSED = 'CAPTCHA_DIALOG_CLOSED';\r\nexport const ERROR_DIALOG_OPENED = 'ERROR_DIALOG_OPENED';\r\nexport const ERROR_DIALOG_CLOSED = 'ERROR_DIALOG_CLOSED';\r\n\r\nexport interface CorsDialogOpenedAction {\r\n    type: typeof CORS_DIALOG_OPENED;\r\n}\r\n\r\nexport interface CorsDialogClosedAction {\r\n    type: typeof CORS_DIALOG_CLOSED;\r\n}\r\n\r\nexport interface CaptchaDialogOpenedAction {\r\n    type: typeof CAPTCHA_DIALOG_OPENED;\r\n}\r\n\r\nexport interface CaptchaDialogClosedAction {\r\n    type: typeof CAPTCHA_DIALOG_CLOSED;\r\n}\r\n\r\nexport interface ErrorDialogOpenedAction {\r\n    type: typeof ERROR_DIALOG_OPENED;\r\n    payload: JSX.Element;\r\n}\r\n\r\nexport interface ErrorDialogClosedAction {\r\n    type: typeof ERROR_DIALOG_CLOSED;\r\n}\r\n\r\nexport type UIActionType = CorsDialogOpenedAction | CorsDialogClosedAction | CaptchaDialogOpenedAction | CaptchaDialogClosedAction | ErrorDialogOpenedAction | ErrorDialogClosedAction;\r\n","import { Dispatch } from 'redux';\r\nimport { getCharacterStats } from '../../../helpers/dnd-beyond';\r\nimport { getRequestErrorMessage } from '../../../helpers/getRequestErrorMessage';\r\nimport { State, Character } from '../../types';\r\nimport { openErrorDialog } from '../ui';\r\nimport { CHARACTER_ADDED, CHARACTER_UPDATED, CHARACTER_MAX_HP_UPDATED, CHARACTER_FETCH_FAILED, CHARACTER_ALREADY_EXISTS, CHARACTER_DELETED } from './types';\r\n\r\nexport const addCharacterByUrl = (url: string, maxHitPoints: number) => (dispatch: Dispatch<any>, getState: () => State) => {\r\n    const characterId = url.split('/')[url.split('/').length - 1];\r\n    const { characters } = getState();\r\n    if (characters && characters.every(c => c.id.toString() !== characterId)) {\r\n        getCharacterStats({ characterId }).then(\r\n            stats => {\r\n                const { id, name, removedHitPoints, temporaryHitPoints, deathSaves, avatarUrl, themeColor, defaultBackdrop } = stats;\r\n                const character: Character = { id, name, maxHitPoints, removedHitPoints, temporaryHitPoints, deathSaves, avatarUrl, themeColor, defaultBackdrop, };\r\n                dispatch(addCharacter(character));\r\n            },\r\n            (error) => dispatch(openErrorDialog(getRequestErrorMessage(error))),\r\n        );\r\n    } else {\r\n        dispatch(updateCharacterById(parseInt(characterId), maxHitPoints));\r\n    }\r\n};\r\n\r\nexport const updateCharacterById = (id: number, maxHitPoints: number) => (dispatch: Dispatch<any>, getState: () => State) => {\r\n    const { characters } = getState();\r\n    if (characters) {\r\n        const character = characters.find(c => c.id === id);\r\n        if (character) {\r\n            getCharacterStats({ characterId: id.toString() }).then(\r\n                stats => {\r\n                    const { id, name, removedHitPoints, temporaryHitPoints, deathSaves, avatarUrl, themeColor, defaultBackdrop } = stats;\r\n                    const updatedCharacter: Character = { id, name, maxHitPoints, removedHitPoints, temporaryHitPoints, deathSaves, avatarUrl, themeColor, defaultBackdrop, };\r\n                    dispatch(updateCharacter(id, updatedCharacter));\r\n                },\r\n                (error) => dispatch(openErrorDialog(getRequestErrorMessage(error))),\r\n            );\r\n        } else {\r\n            dispatch(addCharacterByUrl(id.toString(), maxHitPoints));\r\n        }\r\n    }\r\n};\r\n\r\nexport const addCharacter = (character: Character) => ({\r\n    type: CHARACTER_ADDED,\r\n    payload: character,\r\n});\r\n\r\nexport const updateCharacter = (id: number, character: Character) => ({\r\n    type: CHARACTER_UPDATED,\r\n    payload: { id, character },\r\n});\r\n\r\nexport const updateCharacterMaxHp = (id: number, maxHp: number) => ({\r\n    type: CHARACTER_MAX_HP_UPDATED,\r\n    payload: { id, maxHp },\r\n}); \r\n\r\nexport const deleteCharacter = (id: number) => ({\r\n    type: CHARACTER_DELETED,\r\n    payload: { id },\r\n});\r\n\r\nexport const characterFetchFailed = (error: string) => ({\r\n    type: CHARACTER_FETCH_FAILED,\r\n    error,\r\n});\r\n\r\nexport const characterAlreadyExists = () => ({\r\n    type: CHARACTER_ALREADY_EXISTS,\r\n});\r\n","import { Character } from '../../types';\r\n\r\nexport const CHARACTER_ADDED = 'CHARACTER_ADDED';\r\nexport const CHARACTER_UPDATED = 'CHARACTER_UPDATED';\r\nexport const CHARACTER_MAX_HP_UPDATED = 'CHARACTER_MAX_HP_UPDATED';\r\nexport const CHARACTER_DELETED = 'CHARACTER_DELETED';\r\n\r\nexport const CHARACTER_FETCH_FAILED = 'CHARACTER_FETCH_FAILED';\r\nexport const CHARACTER_ALREADY_EXISTS = 'CHARACTER_ALREADY_EXISTS';\r\n\r\nexport interface CharacterAddedAction {\r\n    type: typeof CHARACTER_ADDED;\r\n    payload: Character;\r\n}\r\n\r\nexport interface CharacterUpdatedAction {\r\n    type: typeof CHARACTER_UPDATED;\r\n    payload: {\r\n        id: number;\r\n        character: Character;\r\n    };\r\n}\r\n\r\nexport interface CharacterMaxHpUpdatedAction {\r\n    type: typeof CHARACTER_MAX_HP_UPDATED;\r\n    payload: {\r\n        id: number;\r\n        maxHp: number;\r\n    };\r\n}\r\n\r\nexport interface CharacterDeletedAction {\r\n    type: typeof CHARACTER_DELETED;\r\n    payload: {\r\n        id: number;\r\n    };\r\n}\r\n\r\nexport interface CharacterFetchFailedAction {\r\n    type: typeof CHARACTER_FETCH_FAILED;\r\n    error: string;\r\n}\r\n\r\nexport interface CharacterAlreadyExistsAction {\r\n    type: typeof CHARACTER_ALREADY_EXISTS;\r\n}\r\n\r\nexport type CharacterActionType =\r\n    CharacterAddedAction |\r\n    CharacterUpdatedAction |\r\n    CharacterMaxHpUpdatedAction |\r\n    CharacterDeletedAction | \r\n    CharacterFetchFailedAction |\r\n    CharacterAlreadyExistsAction;\r\n","import { Character } from '../types';\r\nimport {\r\n    CHARACTER_ADDED,\r\n    CHARACTER_UPDATED,\r\n    CHARACTER_MAX_HP_UPDATED,\r\n    CHARACTER_DELETED,\r\n    CHARACTER_FETCH_FAILED,\r\n    CHARACTER_ALREADY_EXISTS,\r\n    CharacterUpdatedAction,\r\n    CharacterMaxHpUpdatedAction,\r\n    CharacterActionType,\r\n    CharacterDeletedAction,\r\n} from '../actions/characters';\r\n\r\nexport type CharactersState = Character[];\r\n\r\nconst initialState: CharactersState = [];\r\n\r\nconst updateCharacterById = (state: CharactersState, action: CharacterUpdatedAction) => {\r\n    const { id, character } = action.payload;\r\n    const prevCharacter = state.find(c => c.id === id);\r\n    if (prevCharacter) {\r\n        const index = state.indexOf(prevCharacter);\r\n        return [...state.slice(0, index), character, ...state.slice(index + 1)];\r\n    }\r\n    return [...state, character];\r\n};\r\n\r\nconst updateMaxHpById = (state: CharactersState, action: CharacterMaxHpUpdatedAction) => {\r\n    const { id, maxHp } = action.payload;\r\n    const character = state.find(c => c.id === id);\r\n    if (character) {\r\n        const index = state.indexOf(character);\r\n        return [...state.slice(0, index), { ...character, maxHitPoints: maxHp }, ...state.slice(index + 1)];\r\n    }\r\n    return [...state];\r\n};\r\n\r\nconst deleteById = (state: CharactersState, action: CharacterDeletedAction) => {\r\n    const { id } = action.payload;\r\n    const character = state.find(c => c.id === id);\r\n    if (character) {\r\n        const index = state.indexOf(character);\r\n        return [...state.slice(0, index), ...state.slice(index + 1)];\r\n    }\r\n    return [...state];\r\n};\r\n\r\nexport const characters = (state = initialState, action: CharacterActionType) => {\r\n    switch (action.type) {\r\n    case CHARACTER_ADDED:\r\n        return [...state, action.payload];\r\n\r\n    case CHARACTER_UPDATED:\r\n        return updateCharacterById(state, action);\r\n\r\n    case CHARACTER_MAX_HP_UPDATED:\r\n        return updateMaxHpById(state, action);\r\n\r\n    case CHARACTER_DELETED:\r\n        return deleteById(state, action);\r\n\r\n    case CHARACTER_ALREADY_EXISTS:\r\n    case CHARACTER_FETCH_FAILED:\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { NPC, State } from '../../types';\r\nimport { openErrorDialog } from '../ui';\r\nimport {\r\n    NPC_ADDED,\r\n    NPC_DELETED,\r\n    NPC_UPDATED,\r\n} from './types';\r\n\r\nexport const addNPCSafe = (npc: NPC) => (dispatch: Dispatch<any>, getState: () => State) => {\r\n    const { npcs } = getState();\r\n    if (npcs && npcs.find(n => n.name === npc.name)) {\r\n        dispatch(openErrorDialog(<>NPC with this name already exists.</>));\r\n    } else {\r\n        dispatch(addNPC(npc));\r\n    }\r\n};\r\n\r\nexport const addNPC = (npc: NPC) => ({\r\n    type: NPC_ADDED,\r\n    payload: npc,\r\n});\r\n\r\nexport const deleteNPC = (npc: NPC) => ({\r\n    type: NPC_DELETED,\r\n    payload: npc,\r\n});\r\n\r\nexport interface UpdateNPCProps {\r\n    originalNPC: NPC;\r\n    updatedNPC: NPC;\r\n}\r\n\r\nexport const updateNPCSafe = (props: UpdateNPCProps) => (dispatch: Dispatch<any>, getState: () => State) => {\r\n    const { npcs } = getState();\r\n    if (npcs && npcs.find(n => n.name === props.updatedNPC.name)) {\r\n        dispatch(openErrorDialog(<>NPC with this name already exists.</>));\r\n    } else {\r\n        dispatch(updateNPC(props));\r\n    }\r\n};\r\n\r\nexport const updateNPC = (props: UpdateNPCProps) => ({\r\n    type: NPC_UPDATED,\r\n    payload: props,\r\n});\r\n","import { NPC } from '../../types';\r\n\r\nexport const NPC_ADDED = 'NPC_ADDED';\r\nexport const NPC_DELETED = 'NPC_DELETED';\r\nexport const NPC_UPDATED = 'NPC_UPDATED';\r\n\r\nexport interface NPCAddedActionType {\r\n    type: typeof NPC_ADDED;\r\n    payload: NPC;\r\n}\r\n\r\nexport interface NPCDeletedActionType {\r\n    type: typeof NPC_DELETED;\r\n    payload: NPC;\r\n}\r\n\r\nexport interface NPCUpdatedActionType {\r\n    type: typeof NPC_UPDATED;\r\n    payload: { \r\n        originalNPC: NPC;\r\n        updatedNPC: NPC;\r\n    };\r\n}\r\n\r\nexport type NPCActionType = NPCAddedActionType | NPCDeletedActionType | NPCUpdatedActionType;\r\n","import { NPC } from '../types';\r\nimport {\r\n    NPC_ADDED,\r\n    NPC_DELETED,\r\n    NPC_UPDATED,\r\n    NPCActionType,\r\n    NPCDeletedActionType,\r\n    NPCUpdatedActionType,\r\n} from '../actions/npcs';\r\n\r\nexport type NPCState = NPC[];\r\n\r\nconst initialState: NPCState = [];\r\n\r\nconst deleteNPC = (state: NPCState, action: NPCDeletedActionType) => {\r\n    const { payload: npc } = action;\r\n    const index = state.indexOf(npc);\r\n    if (index !== -1) {\r\n        return [...state.slice(0, index), ...state.slice(index + 1)];\r\n    }\r\n    return [...state];\r\n};\r\n\r\nconst updateNPC = (state: NPCState, action: NPCUpdatedActionType) => {\r\n    const { payload: { originalNPC, updatedNPC } } = action;\r\n    const index = state.indexOf(originalNPC);\r\n    if (index !== -1) {\r\n        return [...state.slice(0, index), updatedNPC, ...state.slice(index + 1)];\r\n    }\r\n    return [...state];\r\n};\r\n\r\nexport const npcs = (state = initialState, action: NPCActionType) => {\r\n    switch (action.type) {\r\n    case NPC_ADDED:\r\n        return [...state, action.payload];\r\n\r\n    case NPC_DELETED:\r\n        return deleteNPC(state, action);\r\n\r\n    case NPC_UPDATED:\r\n        return updateNPC(state, action);\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n","import {\r\n    ERROR_DIALOG_OPENED,\r\n    ERROR_DIALOG_CLOSED,\r\n    UIActionType,\r\n} from '../actions/ui';\r\n\r\nexport type UIState = {\r\n    errorDialog: {\r\n        isOpen: boolean;\r\n        message?: JSX.Element;\r\n    };\r\n};\r\n\r\nconst initialState: UIState = { \r\n    errorDialog: {\r\n        isOpen: false,\r\n    },\r\n};\r\n\r\nexport const ui = (state = initialState, action: UIActionType) => {\r\n    switch (action.type) {\r\n    case ERROR_DIALOG_OPENED:\r\n        if (!state.errorDialog.isOpen) {\r\n            return {...state, errorDialog: { isOpen: true, message: action.payload }};\r\n        }\r\n        return state;\r\n\r\n    case ERROR_DIALOG_CLOSED:\r\n        return {...state, errorDialog: { isOpen: false, message: state.errorDialog.message }};\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};","import { omit, findKey, filter, reduce, keys } from 'lodash/fp';\r\nimport { Character, NPC } from '../types';\r\nimport {\r\n    ENC_CHARACTER_ADDED,\r\n    ENC_NPC_ADDED,\r\n    ENC_CHARACTER_REMOVED,\r\n    ENC_NPC_REMOVED,\r\n    EncCharacterAddedAction,\r\n    EncNPCAddedAction,\r\n    EncCharacterRemovedAction,\r\n    EncNPCRemovedAction,\r\n    EncounterActionType,\r\n} from '../actions/encounter/types';\r\n\r\nexport interface EncounterState {\r\n    characters: Record<number, Character>;\r\n    npcs: Record<number, NPC>;\r\n    initiativeById: Record<number, NPC>;\r\n    currentId: number;\r\n}\r\n\r\nconst initialState: EncounterState = {\r\n    characters: {},\r\n    npcs: {},\r\n    initiativeById: {},\r\n    currentId: 0,\r\n};\r\n\r\nconst addCharacter = (state: EncounterState, action: EncCharacterAddedAction) => {\r\n    const { characters } = state;\r\n    const { payload: { name } } = action;\r\n\r\n    const characterNumber = Object.keys(characters).filter(key => characters[parseInt(key)] && characters[parseInt(key)].name.includes(name)).length;\r\n\r\n    if (characterNumber === 0) {\r\n        return {\r\n            ...state,\r\n            characters: {...state.characters, [state.currentId]: action.payload},\r\n            currentId: state.currentId + 1,\r\n        };\r\n    } else {\r\n        return {\r\n            ...state,\r\n            characters: {...state.characters, [state.currentId]: {\r\n                ...action.payload,\r\n                name: `${name} #${characterNumber + 1}`,\r\n            }},\r\n            currentId: state.currentId + 1,\r\n        };\r\n    }\r\n};\r\n\r\nconst addNPC = (state: EncounterState, action: EncNPCAddedAction) => {\r\n    const { npcs } = state;\r\n    const { payload: { name } } = action;\r\n\r\n    const npcNumber = Object.keys(npcs).filter(key => npcs[parseInt(key)] && npcs[parseInt(key)].name.includes(name)).length;\r\n\r\n    if (npcNumber === 0) {\r\n        return {\r\n            ...state,\r\n            npcs: {...state.npcs, [state.currentId]: action.payload},\r\n            currentId: state.currentId + 1,\r\n        };\r\n    } else {\r\n        return {\r\n            ...state,\r\n            npcs: {...state.npcs, [state.currentId]: {\r\n                ...action.payload,\r\n                name: `${name} #${npcNumber + 1}`,\r\n            }},\r\n            currentId: state.currentId + 1,\r\n        };\r\n    }\r\n};\r\n\r\nconst removeCharacter = (state: EncounterState, action: EncCharacterRemovedAction) => {\r\n    const characterKey = findKey((c: Character) => c.id === action.payload.id, state.characters);\r\n    if (!characterKey) {\r\n        return state;\r\n    }\r\n\r\n    return {\r\n        ...state,\r\n        characters: omit(characterKey, state.characters),\r\n    };\r\n};\r\n\r\nconst removeNPC = (state: EncounterState, action: EncNPCRemovedAction) => {\r\n    const { npcs } = state;\r\n    const { name } = action.payload;\r\n    const addedNPCsKeys = filter(key => npcs[parseInt(key)].name.startsWith(name), keys(npcs));\r\n\r\n    if (addedNPCsKeys.length === 0) {\r\n        return state;\r\n    }\r\n\r\n    const latestAddedNpc = reduce(\r\n        (accumulator, keyString) => {\r\n            const key = parseInt(keyString);\r\n            const npc = npcs[key];\r\n\r\n            if (npc.name === name) {\r\n                if (accumulator.number < 1) {\r\n                    return { key, number: 1 };\r\n                }\r\n                return accumulator;\r\n            }\r\n\r\n            const splitByHash = npc.name.slice(name.length).split('#');\r\n            const number = parseInt(splitByHash[splitByHash.length - 1]);\r\n\r\n            if (number > accumulator.number) {\r\n                return { key, number };\r\n            }\r\n\r\n            return accumulator;\r\n        },\r\n        {\r\n            key: 0,\r\n            number: -1,\r\n        },\r\n        addedNPCsKeys,\r\n    );\r\n\r\n    return {\r\n        ...state,\r\n        npcs: omit(latestAddedNpc.key, npcs),\r\n    };\r\n};\r\n\r\nexport const encounter = (state = initialState, action: EncounterActionType) => {\r\n    switch (action.type) {\r\n    case ENC_CHARACTER_ADDED:\r\n        return addCharacter(state, action);\r\n\r\n    case ENC_NPC_ADDED:\r\n        return addNPC(state, action);\r\n\r\n    case ENC_CHARACTER_REMOVED:\r\n        return initialState;\r\n        // return removeCharacter(state, action);\r\n\r\n    case ENC_NPC_REMOVED:\r\n        return removeNPC(state, action);\r\n\r\n    default:\r\n        // return initialState;\r\n        return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { characters } from './characters';\r\nimport { npcs } from './npcs';\r\nimport { ui } from './ui';\r\nimport { encounter } from './encounter';\r\n\r\nconst rootReducer = combineReducers({\r\n    characters,\r\n    npcs,\r\n    ui,\r\n    encounter,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { Character, NPC } from '../../types';\r\n\r\nexport const ENC_CHARACTER_ADDED = 'ENC_CHARACTER_ADDED';\r\nexport const ENC_NPC_ADDED = 'ENC_NPC_ADDED';\r\nexport const ENC_CHARACTER_REMOVED = 'ENC_CHARACTER_REMOVED';\r\nexport const ENC_NPC_REMOVED = 'ENC_NPC_REMOVED';\r\n\r\nexport interface EncCharacterAddedAction { \r\n    type: typeof ENC_CHARACTER_ADDED;\r\n    payload: Character;\r\n}\r\n\r\nexport interface EncNPCAddedAction {\r\n    type: typeof ENC_NPC_ADDED;\r\n    payload: NPC;\r\n}\r\n\r\nexport interface EncCharacterRemovedAction { \r\n    type: typeof ENC_CHARACTER_REMOVED;\r\n    payload: Character;\r\n}\r\n\r\nexport interface EncNPCRemovedAction {\r\n    type: typeof ENC_NPC_REMOVED;\r\n    payload: NPC;\r\n}\r\n\r\nexport type EncounterActionType = EncCharacterAddedAction | EncNPCAddedAction | EncCharacterRemovedAction | EncNPCRemovedAction;\r\n","import { createStore, applyMiddleware, Reducer } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport rootReducer from './reducers';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: autoMergeLevel2,\r\n    blacklist: ['ui'],\r\n};\r\n\r\nexport const store = createStore(persistReducer(persistConfig, rootReducer as Reducer<any, any>), applyMiddleware(thunk));\r\nexport const persistor = persistStore(store);\r\n","import styled from 'styled-components';\r\n\r\nexport const LoadingViewBackground = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #666666;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nexport const LoadingViewContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nexport const LoadingViewImage = styled.img`\r\n    width: 400px;\r\n    max-width: 80%;\r\n`;\r\n\r\nexport const LoadingViewText = styled.div`\r\n    font-family: 'Yeon Sung';\r\n    font-size: 40px;\r\n    line-height: 40px;\r\n    color: orange;\r\n`;\r\n","import React from 'react';\r\nimport { LoadingViewBackground, LoadingViewContainer, LoadingViewImage, LoadingViewText } from './style';\r\n\r\nconst LoadingView = () => (\r\n    <LoadingViewBackground>\r\n        <LoadingViewContainer>\r\n            <LoadingViewImage src={`${process.env.PUBLIC_URL}/fire.gif`} />\r\n            <LoadingViewText>Loading</LoadingViewText>\r\n        </LoadingViewContainer>\r\n    </LoadingViewBackground>\r\n);\r\n\r\nexport default LoadingView;\r\n","import styled from 'styled-components';\r\n\r\nexport const NavbarContainer = styled.div`\r\n    width: 100%;\r\n    flex-grow: 1;\r\n`;\r\n","import React from 'react';\r\nimport { AppBar, AppBarProps, Toolbar } from '@material-ui/core';\r\nimport { NavbarContainer } from './style';\r\n\r\nconst Navbar: React.FC<AppBarProps> = ({ children, ...other }) => {\r\n    return (\r\n        <NavbarContainer>\r\n            <AppBar position=\"relative\" color=\"secondary\" style={{ minHeight: '56px' }} {...other}>\r\n                <Toolbar style={{ minHeight: '56px' }}>\r\n                    {children}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </NavbarContainer>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { Tooltip, TooltipProps } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nexport default withStyles(theme => ({\r\n    tooltip: {\r\n        fontSize: 16,\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    arrow: {\r\n        color: theme.palette.secondary.main,\r\n    }\r\n}))((props: TooltipProps) => <Tooltip arrow {...props} />);\r\n","import styled from 'styled-components';\r\n\r\nexport interface RootComponentContainerProps {\r\n    backgroundImageSrc?: string;\r\n}\r\n\r\nexport const RootComponentContainer = styled.div<RootComponentContainerProps>`\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-image: url(\"${props => props.backgroundImageSrc}\");\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n`;\r\n\r\nexport const RootComponentWrapper = styled.div`\r\n    position: absolute;\r\n    top: 64px;\r\n    left: 0;\r\n    width: 100%;\r\n    height: calc(100% - 64px);\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const ContentContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    max-width: 1200px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const ListAndNumpadContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n\r\n    & > :not(:last-child) {\r\n        margin-right: 32px;\r\n    }\r\n`;\r\n\r\nexport const NotesContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Multisize } from './DividedList';\r\n\r\nexport const DividedListContainer = styled.div<Multisize>`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n\r\n    ${props => props.small ? `\r\n        flex-direction: column;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n    ` : `\r\n        justify-content: center;\r\n        align-items: flex-start;\r\n    `}\r\n`;\r\n\r\nexport const DividedListWrapper = styled.div<Multisize>`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    ${props => props.small && 'flex-direction: column;'}\r\n`;\r\n\r\nexport const DividedListSublistContainer = styled.div<{ small?: boolean }>`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n\r\n    ${props => props.small ? `\r\n        width: 100%;\r\n        padding: 16px;\r\n        box-sizing: border-box;\r\n    ` : `\r\n        width: 40%;\r\n        max-width: 600px;\r\n        margin: 16px;\r\n    `}\r\n\r\n    & > :not(:last-child) {\r\n        margin-bottom: 8px;\r\n    }\r\n`;\r\n\r\nexport const Divider = styled.div<{ color: string } & Multisize>`\r\n    border: 1px solid ${props => props.color};\r\n    border-radius: 50%;\r\n    opacity: 0.5;\r\n    margin-bottom: 10px;\r\n\r\n    ${props => props.small ? `\r\n        height: 0;\r\n        margin: 16px;\r\n    ` : `\r\n        width: 0;\r\n        margin-top: 56px;\r\n    `}\r\n`;\r\n// margin-bottom: 64px;\r\n","import React from 'react';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { DividedListContainer, DividedListWrapper, Divider, DividedListSublistContainer } from './style';\r\n\r\nexport interface Multisize {\r\n    small: boolean;\r\n}\r\n\r\nexport interface DividedListProps {\r\n    children: { 0: React.ReactElement<unknown & Multisize> } & Array<React.ReactElement<unknown & Multisize>>;\r\n}\r\n\r\nconst DividedList = ({ children }: DividedListProps) => {\r\n    const theme = useTheme();\r\n    const small = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    return (\r\n        <DividedListContainer small={small}>\r\n            <DividedListWrapper small={small}>\r\n                <DividedListSublistContainer small={small}>\r\n                    {React.cloneElement(children[0], { small })}\r\n                </DividedListSublistContainer>\r\n                {children.slice(1).map((child, id) => (\r\n                    <React.Fragment key={child.key || id}>\r\n                        <Divider color={theme.palette.secondary.main} small={small} />\r\n                        <DividedListSublistContainer small={small}>\r\n                            {React.cloneElement(child, { small })}\r\n                        </DividedListSublistContainer>\r\n                    </React.Fragment>\r\n                ))}\r\n            </DividedListWrapper>\r\n        </DividedListContainer>\r\n    );\r\n};\r\n\r\nexport default DividedList;\r\n","import styled from 'styled-components';\r\nimport { Toolbar } from '@material-ui/core';\r\n\r\nexport const SavedCharacterListItemContainer = styled(Toolbar)`\r\n    && {\r\n        padding: 0 12px;\r\n        min-height: 56px;\r\n        height: 56px;\r\n    }\r\n\r\n    & > :not(:last-child) {\r\n        margin-right: 16px;\r\n    }\r\n`;\r\n\r\nexport const Grow = styled.div`\r\n    flex-grow: 1;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    Paper,\r\n    Avatar,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n    IconButton,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogActions\r\n} from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Character } from '../../redux/types';\r\nimport { updateCharacterMaxHp, deleteCharacter } from '../../redux/actions/characters';\r\nimport { SavedCharacterListItemContainer, Grow } from './style';\r\n\r\ninterface DispatchProps {\r\n    updateCharacterMaxHp: typeof updateCharacterMaxHp;\r\n    deleteCharacter: typeof deleteCharacter;\r\n}\r\n\r\nexport interface SavedCharacterListItemProps {\r\n    character: Character;\r\n}\r\n\r\nconst SavedCharacterListItem: React.FC<SavedCharacterListItemProps & DispatchProps> = ({ character, updateCharacterMaxHp, deleteCharacter }) => {\r\n    const [maxHp, setMaxHp] = useState<string>(character.maxHitPoints.toString());\r\n    const [isDialogOpen, setIsDialogOpen] = useState<boolean>(false);\r\n\r\n    const openConfirmationDialog = () => setIsDialogOpen(true);\r\n    const closeConfirmationDialog = () => setIsDialogOpen(false);\r\n\r\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { id } = character;\r\n        const { value } = e.target;\r\n\r\n        setMaxHp(value);\r\n        updateCharacterMaxHp(id, parseInt(value) || 0);\r\n    };\r\n\r\n    const handleDeletionConfirmed = () => {\r\n        const { id } = character;\r\n        deleteCharacter(id);\r\n        closeConfirmationDialog();\r\n    };\r\n\r\n    const { name, avatarUrl } = character;\r\n\r\n    return (\r\n        <Paper elevation={3} style={{ width: '100%', height: '56px' }}>\r\n            <SavedCharacterListItemContainer>\r\n                <Avatar variant=\"rounded\" src={avatarUrl} />\r\n                <Typography variant=\"h6\">{name}</Typography>\r\n                <Grow />\r\n                <TextField label=\"Max HP\" type=\"number\" value={maxHp} onChange={onInputChange} style={{ width: '64px' }} />\r\n                <IconButton onClick={openConfirmationDialog}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </SavedCharacterListItemContainer>\r\n            <Dialog open={isDialogOpen} onClose={closeConfirmationDialog}>\r\n                <DialogTitle>Are you sure you want to delete {name}?</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>This will remove them from your list of saved characters. You will only be able to undo this by adding this character again.</DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeConfirmationDialog} color=\"secondary\">Cancel</Button>\r\n                    <Button onClick={handleDeletionConfirmed} color=\"primary\" variant=\"contained\">Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default connect(null, { updateCharacterMaxHp, deleteCharacter })(SavedCharacterListItem);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Button, Typography } from '@material-ui/core';\r\nimport { addCharacterByUrl } from '../../redux/actions/characters';\r\nimport { State, Character } from '../../redux/types';\r\nimport { SavedCharacterListItem } from '../SavedCharacterListItem';\r\n\r\ninterface StateProps {\r\n    characters: Character[];\r\n}\r\n\r\ninterface DispatchProps {\r\n    addCharacterByUrl: (url: string, maxHitPoints: number) => void;\r\n}\r\n\r\nexport interface SavedCharactersListProps {\r\n    small?: boolean;\r\n}\r\n\r\nconst SavedCharactersList: React.FC<SavedCharactersListProps & StateProps & DispatchProps> = ({ small, characters, addCharacterByUrl }) => {\r\n    const [isNewCharacterDialogOpen, setIsNewCharacterDailogOpen] = useState<boolean>(false);\r\n    const [characterURL, setCharacterURL] = useState<string>('');\r\n    const [characterMaxHitPoints, setCharacterMaxHitPoints] = useState<string>('');\r\n\r\n    const openNewCharacterDialog = () => setIsNewCharacterDailogOpen(true);\r\n    const closeNewCharacterDialog = () => setIsNewCharacterDailogOpen(false);\r\n\r\n    const handleCharacterURLChange = (e: React.ChangeEvent<HTMLInputElement>) => setCharacterURL(e.target.value);\r\n    const handleMaxHitPointsChange = (e: React.ChangeEvent<HTMLInputElement>) => setCharacterMaxHitPoints(e.target.value);\r\n\r\n    const handleImportConfirmed = () => {\r\n        closeNewCharacterDialog();\r\n        addCharacterByUrl(characterURL, parseInt(characterMaxHitPoints) || 0);\r\n        setCharacterURL('');\r\n        setCharacterMaxHitPoints('');\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h5\">Characters</Typography>\r\n            {characters.length > 0\r\n                ? (\r\n                    characters.map(c => (\r\n                        <SavedCharacterListItem key={c.id} character={c} />\r\n                    ))\r\n                )\r\n                : (\r\n                    <Typography variant=\"body1\">Currently you don't have any saved characters.</Typography>\r\n                )\r\n            }\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={openNewCharacterDialog}>Add character</Button>\r\n            <Dialog open={isNewCharacterDialogOpen} onClose={closeNewCharacterDialog}>\r\n                <DialogTitle>Import new character from D&D Beyond</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Paste a link to the character you want to add in the input field below. Make sure the character privacy is set to \"Public\", otherwise it will not be imported.\r\n                        <br /> <br />\r\n                        Optionally, specify character's maximum hit points. You will be able to change them later.\r\n                    </DialogContentText>\r\n                    <TextField autoFocus fullWidth margin=\"dense\" label=\"Character URL\" value={characterURL} onChange={handleCharacterURLChange} />\r\n                    <TextField fullWidth type=\"number\" margin=\"dense\" label=\"Max Hit Points\" value={characterMaxHitPoints} onChange={handleMaxHitPointsChange} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeNewCharacterDialog} color=\"secondary\">Cancel</Button>\r\n                    <Button onClick={handleImportConfirmed} color=\"primary\" variant=\"contained\" disabled={!characterURL}>Import</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    characters: (state && state.characters) || [],\r\n});\r\n\r\nexport default connect(mapStateToProps, { addCharacterByUrl })(SavedCharactersList);\r\n","import styled from 'styled-components';\r\nimport { Toolbar } from '@material-ui/core';\r\n\r\nexport const SavedNPCListItemContainer = styled(Toolbar)`\r\n    && {\r\n        padding: 0 12px;\r\n        min-height: 56px;\r\n        height: 56px;\r\n    }\r\n\r\n    & > :first-child {\r\n        margin-right: 16px;\r\n    }\r\n`;\r\n\r\nexport const Grow = styled.div`\r\n    flex-grow: 1;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    Paper,\r\n    Avatar,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n    IconButton,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogActions\r\n} from '@material-ui/core';\r\nimport { Edit, Delete } from '@material-ui/icons';\r\nimport { NPC } from '../../redux/types';\r\nimport { updateNPCSafe, deleteNPC, UpdateNPCProps } from '../../redux/actions/npcs';\r\nimport { SavedNPCListItemContainer, Grow } from './style';\r\n\r\ninterface DispatchProps {\r\n    updateNPCSafe: (props: UpdateNPCProps) => void;\r\n    deleteNPC: typeof deleteNPC;\r\n}\r\n\r\nexport interface SavedNPCListItemProps {\r\n    npc: NPC;\r\n}\r\n\r\nconst SavedNPCListItem: React.FC<SavedNPCListItemProps & DispatchProps> = ({ npc, updateNPCSafe, deleteNPC }) => {\r\n    const { name, avatarUrl, maxHitPoints } = npc;\r\n\r\n    const [isEditDialogOpen, setIsEditDialogOpen] = useState<boolean>(false);\r\n    const [isDeleteConfirmationDialogOpen, setIsDeleteConfirmationDialogOpen] = useState<boolean>(false);\r\n    const [NPCName, setNPCName] = useState<string>(name);\r\n    const [NPCMaxHitPoints, setNPCMaxHitPoints] = useState<string>(maxHitPoints.toString());\r\n    const [NPCAvatarUrl, setNPCAvatarUrl] = useState<string>(avatarUrl || '');\r\n\r\n    const openEditDialog = () => setIsEditDialogOpen(true);\r\n    const closeEditDialog = () => setIsEditDialogOpen(false);\r\n\r\n    const openDeleteConfirmationDialog = () => setIsDeleteConfirmationDialogOpen(true);\r\n    const closeDeleteConfirmationDialog = () => setIsDeleteConfirmationDialogOpen(false);\r\n\r\n    const handleNPCNameChange = (e: React.ChangeEvent<HTMLInputElement>) => setNPCName(e.target.value);\r\n    const handleMaxHitPointsChange = (e: React.ChangeEvent<HTMLInputElement>) => setNPCMaxHitPoints(e.target.value);\r\n    const handleNpcAvatarUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => setNPCAvatarUrl(e.target.value); \r\n\r\n    const handleEditConfirmed = () => {\r\n        const maxHitPoints = parseInt(NPCMaxHitPoints) || 0;\r\n        updateNPCSafe({\r\n            originalNPC: npc,\r\n            updatedNPC: { name: NPCName, avatarUrl: NPCAvatarUrl, maxHitPoints },\r\n        });\r\n        closeEditDialog();\r\n    };\r\n\r\n    const handleDeletionConfirmed = () => {\r\n        closeDeleteConfirmationDialog();\r\n        deleteNPC(npc);\r\n    };\r\n\r\n    return (\r\n        <Paper elevation={3} style={{ width: '100%', height: '56px' }}>\r\n            <SavedNPCListItemContainer>\r\n                <Avatar variant=\"rounded\" src={avatarUrl} />\r\n                <Typography variant=\"h6\">{name}</Typography>\r\n                <Grow />\r\n                <IconButton onClick={openEditDialog}>\r\n                    <Edit />\r\n                </IconButton>\r\n                <IconButton onClick={openDeleteConfirmationDialog}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </SavedNPCListItemContainer>\r\n            <Dialog open={isEditDialogOpen} onClose={closeEditDialog}>\r\n                <DialogTitle>Edit {name}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>Change name, max hit points or avatar url of your NPC.</DialogContentText>\r\n                    <TextField fullWidth margin=\"dense\" label=\"NPC Name\" value={NPCName} onChange={handleNPCNameChange} />\r\n                    <TextField fullWidth type=\"number\" margin=\"dense\" label=\"Max Hit Points\" value={NPCMaxHitPoints} onChange={handleMaxHitPointsChange} />\r\n                    <TextField fullWidth margin=\"dense\" label=\"Avatar URL\" value={NPCAvatarUrl} onChange={handleNpcAvatarUrlChange} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeEditDialog} color=\"secondary\">Cancel</Button>\r\n                    <Button onClick={handleEditConfirmed} color=\"primary\" variant=\"contained\">Save</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog open={isDeleteConfirmationDialogOpen} onClose={closeDeleteConfirmationDialog}>\r\n                <DialogTitle>Are you sure you want to delete {name}?</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>This will remove them from your list of saved NPCs. You will only be able to undo this by creating this NPC again.</DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDeleteConfirmationDialog} color=\"secondary\">Cancel</Button>\r\n                    <Button onClick={handleDeletionConfirmed} color=\"primary\" variant=\"contained\">Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default connect(null, { updateNPCSafe, deleteNPC })(SavedNPCListItem);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Button, Typography } from '@material-ui/core';\r\nimport { addNPCSafe } from '../../redux/actions/npcs';\r\nimport { State, NPC } from '../../redux/types';\r\nimport { SavedNPCListItem } from '../SavedNPCListItem';\r\n\r\ninterface StateProps {\r\n    npcs: NPC[];\r\n}\r\n\r\ninterface DispatchProps {\r\n    addNPCSafe: (npc: NPC) => void;\r\n}\r\n\r\nexport interface SavedCharactersListProps {\r\n    small?: boolean;\r\n}\r\n\r\nconst SavedCharactersList: React.FC<SavedCharactersListProps & StateProps & DispatchProps> = ({ small, npcs, addNPCSafe }) => {\r\n    const [isNewNPCDialogOpen, setIsNewNPCDialogOpen] = useState<boolean>(false);\r\n    const [NPCName, setNPCName] = useState<string>('');\r\n    const [NPCMaxHitPoints, setNPCMaxHitPoints] = useState<string>('');\r\n    const [NPCAvatarUrl, setNPCAvatarUrl] = useState<string>('');\r\n\r\n    const openNewNPCDialog = () => setIsNewNPCDialogOpen(true);\r\n    const closeNewNPCDialog = () => setIsNewNPCDialogOpen(false);\r\n\r\n    const handleNPCNameChange = (e: React.ChangeEvent<HTMLInputElement>) => setNPCName(e.target.value);\r\n    const handleMaxHitPointsChange = (e: React.ChangeEvent<HTMLInputElement>) => setNPCMaxHitPoints(e.target.value);\r\n    const handleNpcAvatarUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => setNPCAvatarUrl(e.target.value); \r\n\r\n    const handleNewNPCConfirmed = () => {\r\n        const maxHitPoints = parseInt(NPCMaxHitPoints) || 0;\r\n        addNPCSafe({ name: NPCName, maxHitPoints, avatarUrl: NPCAvatarUrl });\r\n\r\n        closeNewNPCDialog();\r\n        setNPCName('');\r\n        setNPCMaxHitPoints('');\r\n        setNPCAvatarUrl('');\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h5\">NPCs</Typography>\r\n            {npcs.length > 0\r\n                ? (\r\n                    npcs.map(c => (\r\n                        <SavedNPCListItem key={c.name} npc={c} />\r\n                    ))\r\n                )\r\n                : (\r\n                    <Typography variant=\"body1\">Currently you don't have any saved NPCs.</Typography>\r\n                )\r\n            }\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={openNewNPCDialog}>Add NPC</Button>\r\n            <Dialog open={isNewNPCDialogOpen} onClose={closeNewNPCDialog}>\r\n                <DialogTitle>Create new NPC</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Choose a name for your NPC and specify maximum hit points. Optionally, specify an avatar url or pick one of the default avatars.\r\n                        <br /> <br />\r\n                        It is not possible to have several NPCs with the same name.\r\n                    </DialogContentText>\r\n                    <TextField autoFocus fullWidth margin=\"dense\" label=\"NPC Name\" value={NPCName} onChange={handleNPCNameChange} />\r\n                    <TextField fullWidth type=\"number\" margin=\"dense\" label=\"Max Hit Points\" value={NPCMaxHitPoints} onChange={handleMaxHitPointsChange} />\r\n                    <TextField fullWidth margin=\"dense\" label=\"Avatar URL\" value={NPCAvatarUrl} onChange={handleNpcAvatarUrlChange} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeNewNPCDialog} color=\"secondary\">Cancel</Button>\r\n                    <Button onClick={handleNewNPCConfirmed} color=\"primary\" variant=\"contained\" disabled={!NPCName || !NPCMaxHitPoints}>Create</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    npcs: (state && state.npcs) || [],\r\n});\r\n\r\nexport default connect(mapStateToProps, { addNPCSafe })(SavedCharactersList);\r\n","import styled from 'styled-components';\r\nimport { Toolbar } from '@material-ui/core';\r\n\r\nexport const NewEncCharacterListItemContainer = styled(Toolbar)`\r\n    && {\r\n        padding: 0 6px;\r\n        min-height: 56px;\r\n        height: 56px;\r\n    }\r\n`;\r\n","import React, { useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Checkbox, Paper, Typography, TextField, IconButton } from '@material-ui/core';\r\nimport { Add, Remove } from '@material-ui/icons';\r\nimport { Character, State } from '../../redux/types';\r\nimport { EncounterState } from '../../redux/reducers/encounter';\r\nimport { NewEncCharacterListItemContainer } from './style';\r\nimport { addCharacterToEncounter, removeCharacterFromEncounter } from '../../redux/actions/encounter';\r\n\r\ninterface StateProps {\r\n    encounter: EncounterState | null;\r\n}\r\n\r\ninterface DispatchProps {\r\n    addCharacterToEncounter: typeof addCharacterToEncounter;\r\n    removeCharacterFromEncounter: typeof removeCharacterFromEncounter;\r\n}\r\n\r\nexport interface NewEncCharacterListItemProps {\r\n    character: Character;\r\n}\r\n\r\nconst NewEncCharacterListItem = ({ character, encounter, addCharacterToEncounter, removeCharacterFromEncounter }: NewEncCharacterListItemProps & StateProps & DispatchProps) => {\r\n    const isCharacterSelected = useMemo(() => {\r\n        if (!encounter) {\r\n            return false;\r\n        }\r\n\r\n        return Object.keys(encounter.characters).some(key => encounter.characters[parseInt(key)].name === character.name);\r\n    }, [character, encounter]);\r\n\r\n    const handleCheckboxClick = () => {\r\n        if (isCharacterSelected) {\r\n            removeCharacterFromEncounter(character);\r\n        } else {\r\n            addCharacterToEncounter(character);\r\n        }\r\n    };\r\n\r\n    console.log(encounter);\r\n\r\n    return (\r\n        <Paper elevation={3} style={{ width: '100%', height: '56px' }}>\r\n            <NewEncCharacterListItemContainer>\r\n                <Checkbox disabled={!encounter} checked={isCharacterSelected} color=\"primary\" onClick={handleCheckboxClick} />\r\n                <Typography variant=\"h6\">{character.name}</Typography>\r\n                <div style={{ flexGrow: 1 }} />\r\n                <TextField disabled={!isCharacterSelected} label={isCharacterSelected ? 'Initiative' : ''} type=\"number\" style={{ width: '64px' }} />\r\n            </NewEncCharacterListItemContainer>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    encounter: (state && state.encounter) || null,\r\n});\r\n\r\nexport default connect(mapStateToProps, { addCharacterToEncounter, removeCharacterFromEncounter })(NewEncCharacterListItem);\r\n","import { Character, NPC } from '../../types';\r\nimport { ENC_CHARACTER_ADDED, ENC_NPC_ADDED, ENC_CHARACTER_REMOVED, ENC_NPC_REMOVED } from './types';\r\n\r\nexport const addCharacterToEncounter = (character: Character) => ({\r\n    type: ENC_CHARACTER_ADDED,\r\n    payload: character,\r\n});\r\n\r\nexport const addNPCToEncounter = (npc: NPC) => ({\r\n    type: ENC_NPC_ADDED,\r\n    payload: npc,\r\n});\r\n\r\nexport const removeCharacterFromEncounter = (character: Character) => ({\r\n    type: ENC_CHARACTER_REMOVED,\r\n    payload: character,\r\n});\r\n\r\nexport const removeNPCFromEncounter = (npc: NPC) => ({\r\n    type: ENC_NPC_REMOVED,\r\n    payload: npc,\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Typography } from '@material-ui/core';\r\nimport { State, Character } from '../../redux/types';\r\nimport { NewEncCharacterListItem } from '../NewEncCharacterListItem';\r\n\r\ninterface StateProps {\r\n    characters: Character[];\r\n}\r\n\r\nconst NewEncCharactersList = ({ characters }: StateProps) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h5\">Characters</Typography>\r\n            {characters.map(c => <NewEncCharacterListItem key={c.id} character={c} />)}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    characters: (state && state.characters) || [],\r\n});\r\n\r\nexport default connect(mapStateToProps)(NewEncCharactersList);\r\n","import styled from 'styled-components';\r\nimport { Toolbar } from '@material-ui/core';\r\nimport { Palette } from '@material-ui/core/styles/createPalette';\r\n\r\nexport const NewEncNPCListItemContainer = styled(Toolbar)`\r\n    && {\r\n        padding: 0 6px;\r\n        min-height: 56px;\r\n        height: 56px;\r\n    }\r\n`;\r\n\r\nexport interface NewEncNPCCounterProps {\r\n    palette: Palette;\r\n    children: number | null;\r\n}\r\n\r\nexport const NewEncNPCCounter = styled.div<NewEncNPCCounterProps>`\r\n    width: 18px;\r\n    height: 18px;\r\n    margin: 12px;\r\n    border-radius: 2px;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n\r\n    color: white;\r\n    background-color: white;\r\n\r\n    transition: background-color 300ms, border-color 300ms;\r\n\r\n    ${props => props.children ? `\r\n        background-color: ${props.palette.primary.main};\r\n        border: 2px solid rgba(0, 0, 0, ${props.palette.primary.main});\r\n    ` : `\r\n        border: 2px solid rgba(0, 0, 0, 0.54);\r\n    `}\r\n`;\r\n","import React, { useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduce } from 'lodash/fp';\r\nimport { Checkbox, Paper, Typography, TextField, IconButton, useTheme } from '@material-ui/core';\r\nimport { Add, Remove } from '@material-ui/icons';\r\nimport { NPC, State } from '../../redux/types';\r\nimport { NewEncNPCListItemContainer, NewEncNPCCounter } from './style';\r\nimport { addNPCToEncounter, removeNPCFromEncounter } from '../../redux/actions/encounter';\r\nimport { EncounterState } from '../../redux/reducers/encounter';\r\n\r\ninterface StateProps {\r\n    encounter: EncounterState | null;\r\n}\r\n\r\ninterface DispatchProps {\r\n    addNPCToEncounter: typeof addNPCToEncounter;\r\n    removeNPCFromEncounter: typeof removeNPCFromEncounter;\r\n}\r\n\r\nexport interface NewEncNPCListItemProps {\r\n    npc: NPC;\r\n}\r\n\r\nconst NewEncNPCListItem = ({ npc, encounter, addNPCToEncounter, removeNPCFromEncounter }: NewEncNPCListItemProps & StateProps & DispatchProps) => {\r\n    const theme = useTheme();\r\n\r\n    const addedNPCCount = useMemo(() => {\r\n        if (!encounter) {\r\n            return null;\r\n        }\r\n\r\n        const count = reduce((accumulator, encNpc) => accumulator + (encNpc.name.startsWith(npc.name) ? 1 : 0), 0, encounter.npcs);\r\n        return count === 0 ? null : count;\r\n    }, [npc, encounter]);\r\n\r\n    const handleRemoveClick = () => removeNPCFromEncounter(npc);\r\n    const handleAddClick = () => addNPCToEncounter(npc);\r\n\r\n    return (\r\n        <Paper elevation={3} style={{ width: '100%', height: '56px' }}>\r\n            <NewEncNPCListItemContainer>\r\n                <NewEncNPCCounter palette={theme.palette}>\r\n                    {addedNPCCount}\r\n                </NewEncNPCCounter>\r\n                <Typography variant=\"h6\">{npc.name}</Typography>\r\n                <div style={{ flexGrow: 1 }} />\r\n                <TextField disabled={!addedNPCCount} label={!!addedNPCCount ? 'Initiative' : ''} type=\"number\" style={{ width: '64px' }} />\r\n                <IconButton size=\"small\" onClick={handleRemoveClick}>\r\n                    <Remove />\r\n                </IconButton>\r\n                <IconButton size=\"small\" onClick={handleAddClick}>\r\n                    <Add />\r\n                </IconButton>\r\n            </NewEncNPCListItemContainer>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    encounter: (state && state.encounter) || null,\r\n});\r\n\r\nexport default connect(mapStateToProps, { addNPCToEncounter, removeNPCFromEncounter })(NewEncNPCListItem);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Typography } from '@material-ui/core';\r\nimport { State, NPC } from '../../redux/types';\r\nimport { NewEncNPCListItem } from '../NewEncNPCListItem';\r\n\r\ninterface StateProps {\r\n    npcs: NPC[];\r\n}\r\n\r\nconst NewEncNPCsList = ({ npcs }: StateProps) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h5\">NPCs</Typography>\r\n            {npcs.map(n => <NewEncNPCListItem key={n.name} npc={n} />)}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    npcs: (state && state.npcs) || [],\r\n});\r\n\r\nexport default connect(mapStateToProps)(NewEncNPCsList);\r\n","import React, { useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, Typography } from '@material-ui/core';\r\nimport { People, Close } from '@material-ui/icons';\r\nimport { State } from '../../redux/types';\r\nimport { closeErrorDialog } from '../../redux/actions/ui';\r\nimport { Navbar } from '../Navbar';\r\nimport { Tooltip } from '../Tooltip';\r\nimport { EntityList } from '../EntityList';\r\nimport { Numpad } from '../Numpad';\r\nimport { Notes } from '../Notes';\r\nimport { RootComponentContainer, RootComponentWrapper, ContentContainer, ListAndNumpadContainer, NotesContainer } from './style';\r\nimport { NewEncounterDialogContent } from '../NewEncounterDialogContent';\r\nimport { DividedList } from '../DividedList';\r\nimport { SavedCharactersList } from '../SavedCharactersList';\r\nimport { SavedNPCsList } from '../SavedNPCsList';\r\nimport { NewEncCharactersList } from '../NewEncCharactersList';\r\nimport { NewEncNPCsList } from '../NewEncNPCsList';\r\n\r\nexport interface StateProps {\r\n    currentBackgroundUrl?: string;\r\n    isErrorDialogOpen: boolean;\r\n    errorMessage?: JSX.Element;\r\n}\r\n\r\nexport interface DispatchProps {\r\n    closeErrorDialog: typeof closeErrorDialog;\r\n}\r\n\r\nconst RootComponent: React.FC<StateProps & DispatchProps> = ({ currentBackgroundUrl, isErrorDialogOpen, errorMessage, closeErrorDialog }) => {\r\n    const [isCharacterDialogOpen, setIsCharacterDialogOpen] = useState<boolean>(false);\r\n\r\n    const openCharacterDialog = () => setIsCharacterDialogOpen(true);\r\n    const closeCharacterDialog = () => setIsCharacterDialogOpen(false);\r\n\r\n    return (\r\n        <RootComponentContainer backgroundImageSrc={currentBackgroundUrl}>\r\n            <Navbar>\r\n                <Tooltip title=\"View and edit saved characters\">\r\n                    <IconButton color=\"inherit\" onClick={openCharacterDialog}>\r\n                        <People />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </Navbar>\r\n            <RootComponentWrapper>\r\n                {/* <ContentContainer>\r\n                    <ListAndNumpadContainer>\r\n                        <EntityList />\r\n                        <Numpad />\r\n                    </ListAndNumpadContainer>\r\n                    <NotesContainer>\r\n                        <Notes />\r\n                    </NotesContainer>\r\n                </ContentContainer> */}\r\n            </RootComponentWrapper>\r\n            <Dialog fullScreen open={!!isCharacterDialogOpen} onClose={closeCharacterDialog}>\r\n                <Navbar color=\"primary\">\r\n                    <IconButton color=\"inherit\" onClick={closeCharacterDialog}>\r\n                        <Close />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" style={{ marginLeft: '8px' }}>\r\n                        Saved Characters\r\n                    </Typography>\r\n                </Navbar>\r\n                <DividedList>\r\n                    <SavedCharactersList />\r\n                    <SavedNPCsList />\r\n                </DividedList>\r\n            </Dialog>\r\n            <Dialog maxWidth=\"lg\" fullWidth open>\r\n                <DialogTitle>New Encounter</DialogTitle>\r\n                <DialogContent>\r\n                    <DividedList>\r\n                        <NewEncCharactersList />\r\n                        <NewEncNPCsList />\r\n                    </DividedList>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button color=\"secondary\" onClick={() => {}}>Cancel</Button>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => {}}>Create</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog open={isErrorDialogOpen} onClose={closeErrorDialog}>\r\n                <DialogTitle>Error</DialogTitle>\r\n                <DialogContent>\r\n                    {errorMessage ? <DialogContentText>{errorMessage}</DialogContentText> : null}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={closeErrorDialog}>OK</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </RootComponentContainer>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    currentBackgroundUrl: state.characters && state.characters[1] && state.characters[1].defaultBackdrop.largeBackdropAvatarUrl,\r\n    isErrorDialogOpen: (state.ui && state.ui.errorDialog.isOpen) || false,\r\n    errorMessage: state.ui && state.ui.errorDialog.message,\r\n});\r\n\r\nexport default connect(mapStateToProps, { closeErrorDialog })(RootComponent);\r\n","import React from 'react';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/lib/integration/react';\r\nimport { persistor, store } from './redux';\r\nimport { RootComponent, LoadingView } from './components';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#b13735',\r\n        },\r\n        secondary: {\r\n            main: '#555',\r\n        },\r\n    },\r\n    typography: {\r\n        fontFamily: 'Cairo',\r\n    },\r\n    breakpoints: {\r\n        values: {\r\n            xs: 0,\r\n            sm: 500,\r\n            md: 960,\r\n            lg: 1280,\r\n            xl: 1920,\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => (\r\n    <ThemeProvider theme={theme}>\r\n        <Provider store={store}>\r\n            <PersistGate loading={<LoadingView />} persistor={persistor}>\r\n                <RootComponent />\r\n            </PersistGate>\r\n        </Provider>\r\n    </ThemeProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(<App />);\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}